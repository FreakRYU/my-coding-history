# p.193 / 04-1. 리스트와 반복문
# 1. 리스트란 무엇인가?
print('# 1. 리스트란 무엇인가?')

# 파이썬에서 리스트란, 여러가지 자료를 저장할 수 있는 자료를 말한다.
# 다음 코드는 여섯 개의 자료를 가진 리스트를 선언한 예이다.

array=[273, 32, 103, "문자열", True, False]
print(array)
# 출력값: [273, 32, 103, "문자열", True, False]

# 리스트는 대괄호[] 내부에 여러 종류의 자료를 넣어 선언한다.

print()
#------------------------------------------------------------------------#
# 2. 리스트 선언하고 요소에 접근하기
print('# 2. 리스트 선언하고 요소에 접근하기')

# [] 내부에 넣는 자료를 요소(element)라고 한다.
# list_a[숫자] <- 이 숫자를 인덱스(index)라고 한다. 
# 파이썬의 경우, 리스트 내부에 자료는 0부터 센다.
list_a=[273, 32, 103, "문자열", True, False]
list_a[0]
list_a[1]
list_a[2]
list_a[1:3]
print()

# 2-1. 반대로 대괄호 안에 음수를 넣을 경우, 뒤에서 부터 -1, -2... 순이다.
print('# 2-1. 반대로 대괄호 안에 음수를 넣을 경우, 뒤에서 부터 -1, -2... 순이다.')
list_a[-1]
list_a[-2]
list_a[-3]
print()

# 2-2. 리스트 접근 연산자를 다음과 같이 이중으로 사용할 수 있다.
print('# 2-2. 리스트 접근 연산자를 다음과 같이 이중으로 사용할 수 있다.')
list_a=[273, 32, 103, "문자열", True, False]
list_a[3]
# 출력값: '문자열'
list_a[3][0]
# 출력값: '문'
print()

# 2-3. 리스트 안에 리스트를 사용할 수도 있다.
print('# 2-3. 리스트 안에 리스트를 사용할 수도 있다.')
list_a=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
list_a[1]
# 출력값: [4, 5, 6]
list_a[1][1]
# 출력값: 5

print()
#------------------------------------------------------------------------#
# 3. 리스트 연산하기: 연결(+), 반복(*), len()
print('# 3. 리스트 연산하기: 연결(+), 반복(*), len()')

print('# 리스트')
list_a=[1, 2, 3]
list_b=[4, 5, 6]
print('list_a=',list_a)
print('list_b=',list_b)
print()

print('#리스트 기본 연산자')
print('list_a + list_b =',list_a+list_b)
print('list_a*3=',list_a*3)
print()

print('# 길이 구하기')
print('len(list_a)=',len(list_a))
print()
#------------------------------------------------------------------------#
# 4. 리스트에 요소 추가하기: append(), insert()
print('# 4. 리스트에 요소 추가하기: append(), insert()')

# 리스트에 요소를 추가하는 방법은 두 가지가 있다.
# 리스트명.append(요소)
# 리스트명.insert(위치, 요소)

print('# 리스트 뒤에 요소 추가하기')
list=[1, 2, 3]
list.append(4)
list.append(5)
print(list)
print()

print('# 리스트 중간에 요소 추가하기')
list.insert(0, 10)
print(list)

print()
#------------------------------------------------------------------------#
# 4-1. 한 번에 여러 요소 추가: extend() 
print('# 4-1. 한 번에 여러 요소 추가: extend()')
# 리스트명.extend([리스트 요소들])

list=[1, 2, 3]
list.extend([4, 5, 6])
print(list)

print()
#------------------------------------------------------------------------#
# 4-2. 리스트 연결 연산자와 요소 추가의 차이는?
print('# 4-2. 리스트 연결 연산자와 요소 추가의 차이는?')
# 리스트 연결 연산자는 비파괴적 처리, 요소 추가는 파괴적 처리이다.

# 리스트 연결 연산자 사용 (비파괴적 처리)
list_a=[1, 2, 3]
list_b=[4, 5, 6]
print('list_a + list_b=',list_a+list_b)
print('list_a=',list_a)
print('list_b=',list_b)
print()

# 요소 추가 사용 (파괴적 처리)
list_a=[1, 2, 3]
list_b=[4, 5, 6]
list_a.extend(list_b)
print('list_a=',list_a)
print('list_b=',list_b)

print()
#------------------------------------------------------------------------#
# 4-3. 리스트에 요소 제거하기
print('# 4-3. 리스트에 요소 제거하기')
# 인덱스 제거는 del 키워드, pop()으로 나뉜다.
# del 리스트명[인덱스] -> [] (or [ : ]) 안에 특정한 요소를 바로 지운다.
# 리스트명.pop() -> () 안에 특정한 요소를 바로 지운다.

print('# 리스트의 요소 하나 제거하기')
list_a=[0, 1, 2, 3, 4, 5]
del list_a[1]
print('del list_a[1]=',list_a)

list_a.pop(2)
print('pop(2)=',list_a)

print()
#------------------------------------------------------------------------#
# 4-4. 리스트 슬라이싱
print('# 4-4. 리스트 슬라이싱')
# 리스트[시작_인덱스 : 끝_인덱스 : 단계]
numbers=[1, 2, 3, 4, 5, 6, 7, 8]
numbers[0:5:2]
print(numbers)
print()

numbers=[1, 2, 3, 4, 5, 6, 7, 8]
numbers[::-1]  # 시작 인덱스와 끝 인덱스는 자동으로 전부 지정된다.
print(numbers)

print()
#------------------------------------------------------------------------#
# 4-5. 값으로 제거하기: remove()
print('# 4-5. 값으로 제거하기: remove()')
# 리스트.remove(값)
list=[1, 2, 1, 2]
list.remove(2)
print(list)
# 출력값: [1, 1, 2]

print()
#------------------------------------------------------------------------#
# 4-6. 모두 제거하기: clear()\
print('# 4-6. 모두 제거하기: clear()')
# 리스트.clear()
list=[0, 1, 2, 3, 4, 5]
list.clear()
print(list)

print()
#------------------------------------------------------------------------#
# 4-7. 리스트 정렬하기: sort()
print('# 4-7. 리스트 정렬하기: sort()')
list=[12, 234, 345, 34, 1233, 4234, 13]
list.sort()
print(list)
print()

list.sort(reverse=True)
print(list)

print()
#------------------------------------------------------------------------#
# 4-8. 리스트 내부에 있는지 확인하기: in/not in 연산자
print('# 4-8. 리스트 내부에 있는지 확인하기: in/not in 연산자')
list=[12, 234, 345, 34, 1233, 4234, 13]
print(12 in list)
print(235 in list)
print(34234 in list)
print(234 in list)

print()
#------------------------------------------------------------------------#
# 5. for 반복문: 리스트와 함께 사용하기
print('# 5. for 반복문: 리스트와 함께 사용하기') 
# 반복할 수 있는 것에는 문자열, 리스트, 딕셔너리, 범위 등이 있다.

array=[273, 32, 103, 57, 52]

# 리스트에 반복문을 적용합니다.
for element in array:
    print(element)

print()

# for 반복문과 문자열
for character in "안녕하세요":
    print("-", character)

print()

# 중첩 리스트와 중첩 반복문
list_of_list=[[1, 2, 3], [4, 5, 6, 7], [8, 9]]
for items in list_of_list:
    print(items)

print()

list_of_list=[[1, 2, 3], [4, 5, 6, 7], [8, 9]]